(defn test-fct [fct #*args]
  (setv test-args (.join " " (map (fn [a] (a.__repr__)) args)))
  (print f"Testing ({fct.__name__} {test-args})")
  (fct #*args)
  (time.sleep 2))

(when (= (window_class) "angelspie_test")
  (import sys)
  (debug)
  (assert (= "OK" (spawn_sync "echo" "-n" "OK")))
  (assert (contains "abc" "a"))
  (assert (contains "abc" "b"))
  (assert (not (contains "abc" "x")))
  (assert (= (str+ "a" "b" "c") "abc"))
  (assert (matches "foobar" "o"))
  (assert (matches "foobar" "[o]{2}b"))
  (assert (not (matches "foobar" "[0-9]+")))
  (test-fct maximize)
  (test-fct unmaximize)
  (test-fct maximize_vertically)
  (test-fct unmaximize)
  (test-fct maximize_horizontally)
  (test-fct unmaximize)
  (test-fct minimize)
  (test-fct unminimize)
  (test-fct shade)
  (test-fct unshade)
  (test-fct focus)
  (test-fct center)
  (test-fct skip_pager)
  (test-fct skip_tasklist)
  (test-fct undecorate)
  (test-fct decorate)
  (test-fct fullscreen)
  (test-fct unfullscreen)
  (test-fct geometry "100x100")
  (test-fct geometry "100x100+0+0")
  (test-fct geometry "100x100+100+100")
  (test-fct geometry "100x100-10+100")
  (test-fct geometry "100x100+100-10")
  (test-fct geometry "100x100+100+20%")
  (test-fct geometry "100x100+10%+20%")
  (test-fct geometry "100x100+20%+10%")
  (test-fct geometry "20%x40%+10%+20%")
  (test-fct geometry "40%x20%+10%-10%")
  (test-fct geometry "40%x20%-10%+10%")
  (test-fct geometry "40%x20%+10%+10%")
  (test-fct tile "full")
  (test-fct tile "left")
  (test-fct tile "right")
  (test-fct tile "top")
  (test-fct tile "bottom")
  (test-fct tile "top-left")
  (test-fct tile "center-left")
  (test-fct tile "bottom-left")
  (test-fct tile "top-right")
  (test-fct tile "center-right")
  (test-fct tile "bottom-right")
  (test-fct opacity 20)
  (test-fct opacity 100)
  (test-fct pin)
  (test-fct unpin)
  (test-fct below)
  (test-fct above)
  (assert (= (application_name) "xterm"))
  (setv original-workspace (window_workspace))
  (set_workspace 1)
  (time.sleep 0.5)
  (print "WORKSPACE" (window_workspace))
  (assert (window_workspace) 1)
  (set_workspace 2)
  (time.sleep 0.5)
  (print "WORKSPACE" (window_workspace))
  (assert (window_workspace) 2)
  (set_workspace original-workspace)
  ; TODO window_role
  ; TODO wintype
  ; TODO window_property
  ; TODO stick
  ; TODO unstick
  ; TODO set_viewport
  (close)
  (println "All tests OK")
  (sys.exit 0))