(defn test-visual-fct [fct #*args]
  (setv test-args (.join " " (map (fn [a] (a.__repr__)) args)))
  (print f"Testing ({fct.__name__} {test-args})")
  (setv result (fct #*args))
  (time.sleep 2)
  result)

(defn test-fct [fct #*args]
  (setv test-args (.join " " (map (fn [a] (a.__repr__)) args)))
  (print f"Testing ({fct.__name__} {test-args})")
  (fct #*args))

(when (= (window_class) "angelspie_test")
  (import sys)
  (debug)
  (assert (= "OK" (test-fct spawn_sync "echo" "-n" "OK")))
  (assert (test-fct contains "abc" "a"))
  (assert (test-fct contains "abc" "b"))
  (assert (not (test-fct contains "abc" "x")))
  (assert (= (test-fct str+ "a" "b" "c") "abc"))
  (assert (test-fct matches "foobar" "o"))
  (assert (test-fct matches "foobar" "[o]{2}b"))
  (assert (not (test-fct matches "foobar" "[0-9]+")))
  (test-visual-fct maximize)
  (test-visual-fct unmaximize)
  (test-visual-fct maximize_vertically)
  (test-visual-fct unmaximize)
  (test-visual-fct maximize_horizontally)
  (test-visual-fct unmaximize)
  (test-visual-fct minimize)
  (test-visual-fct unminimize)
  (test-visual-fct shade)
  (test-visual-fct unshade)
  (test-visual-fct focus)
  (test-visual-fct center)
  (test-visual-fct skip_pager)
  (test-visual-fct skip_tasklist)
  (test-visual-fct skip_pager False)
  (test-visual-fct skip_tasklist False)
  (test-visual-fct undecorate)
  (test-visual-fct decorate)
  (test-visual-fct fullscreen)
  (test-visual-fct unfullscreen)
  (test-visual-fct geometry "100x100")
  (test-visual-fct geometry "100x100+0+0")
  (test-visual-fct geometry "100x100+100+100")
  (test-visual-fct geometry "100x100-10+100")
  (test-visual-fct geometry "100x100+100-10")
  (test-visual-fct geometry "100x100+100+20%")
  (test-visual-fct geometry "100x100+10%+20%")
  (test-visual-fct geometry "100x100+20%+10%")
  (test-visual-fct geometry "20%x40%+10%+20%")
  (test-visual-fct geometry "40%x20%+10%-10%")
  (test-visual-fct geometry "40%x20%-10%+10%")
  (test-visual-fct geometry "40%x20%+10%+10%")
  (test-visual-fct tile-at "full")
  (test-visual-fct tile-at "left")
  (test-visual-fct tile-at "right")
  (test-visual-fct tile-at "top")
  (test-visual-fct tile-at "bottom")
  (test-visual-fct tile-at "top-left")
  (test-visual-fct tile-at "center-left")
  (test-visual-fct tile-at "bottom-left")
  (test-visual-fct tile-at "top-right")
  (test-visual-fct tile-at "center-right")
  (test-visual-fct tile-at "bottom-right")
  (test-visual-fct tile "*" "*")
  (test-visual-fct tile "_*_" "_*_")
  (test-visual-fct tile-move "left")
  (test-visual-fct tile-move "right")
  (test-visual-fct tile-move "top")
  (test-visual-fct tile-move "bottom")
  (test-visual-fct opacity 20)
  (test-visual-fct opacity 100)
  (test-visual-fct pin)
  (test-visual-fct unpin)
  (test-visual-fct below)
  (test-visual-fct above)
  (setv original-workspace (window_workspace))
  (set_workspace 1)
  (time.sleep 0.5)
  (assert (test-fct window_workspace) 1)
  (time.sleep 2)
  (assert (test-fct window_workspace) 1)
  (set_workspace 2)
  (time.sleep 0.5)
  (print "WORKSPACE" (window_workspace))
  (assert (test-fct window_workspace) 2)
  (time.sleep 2)
  (assert (test-fct window_workspace) 2)
  (set_workspace original-workspace)
  ; TODO window_role
  ; TODO wintype
  ; TODO window_property
  ; TODO stick
  ; TODO unstick
  ; TODO set_viewport
  ; TODO on-class-change [#*forms]
  ; TODO on-icon-change [#*forms]
  ; TODO on-name-change [#*forms]
  ; TODO on-monitors-change [#*forms]
  ; TODO browser-favicon []
  ; TODO browser-url []
  ; TODO set-monitor
  ; TODO window-type
  (assert (= (type (test-fct monitor)) str))
  (assert (= (type (test-fct monitor-edid)) str))
  (assert (= (type (test-fct monitor-edid "DP1")) str))
  (assert (= (test-fct monitor-edid "foobar") None))
  (assert (= (test-fct monitor-connected "DP1")
             True))
  (assert (= (type (test-fct monitor-height)) int))
  (assert (= (type (test-fct monitor-width)) int))
  (assert (= (type (test-fct screen-height)) int))
  (assert (= (type (test-fct screen-width)) int))
  (assert (= (type (test-fct window-index)) int))
  (assert (= (type (test-fct window-index-in-class)) int))
  (assert (= (type (test-fct window-index-in-workspace)) int))
  (assert (= (type (test-fct monitor-is-primary)) bool))
  (close)
  (println "All tests done"))
